<!DOCTYPE html>
<html lang="hi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Science Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.0/papaparse.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            text-align: center;
        }

        .header h1 {
            color: #667eea;
            font-size: 2.5em;
            margin-bottom: 10px;
        }

        .header p {
            color: #666;
            font-size: 1.1em;
        }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }

        .card h3 {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.3em;
        }

        .upload-area {
            border: 2px dashed #667eea;
            border-radius: 10px;
            padding: 40px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
        }

        .upload-area:hover {
            border-color: #764ba2;
            background: rgba(102, 126, 234, 0.05);
        }

        .upload-area.dragover {
            border-color: #764ba2;
            background: rgba(102, 126, 234, 0.1);
        }

        .upload-icon {
            font-size: 3em;
            color: #667eea;
            margin-bottom: 15px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }

        .stat-value {
            font-size: 2em;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9em;
            opacity: 0.9;
        }

        .chart-container {
            position: relative;
            height: 300px;
            margin-bottom: 20px;
        }

        .input-group {
            margin-bottom: 15px;
        }

        .input-group label {
            display: block;
            margin-bottom: 5px;
            color: #667eea;
            font-weight: 500;
        }

        .input-group input, .input-group select {
            width: 100%;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 1em;
            transition: border-color 0.3s ease;
        }

        .input-group input:focus, .input-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s ease;
            margin-right: 10px;
            margin-bottom: 10px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        .data-table th, .data-table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .data-table th {
            background: #667eea;
            color: white;
        }

        .data-table tr:hover {
            background: rgba(102, 126, 234, 0.05);
        }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .hidden {
            display: none;
        }

        @media (max-width: 768px) {
            .dashboard {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><i class="fas fa-chart-line"></i> Data Science Dashboard</h1>
            <p>Upload your data and explore insights with advanced analytics</p>
        </div>

        <div class="alert alert-success" id="successAlert">
            <i class="fas fa-check-circle"></i> <span id="successMessage"></span>
        </div>

        <div class="alert alert-error" id="errorAlert">
            <i class="fas fa-exclamation-circle"></i> <span id="errorMessage"></span>
        </div>

        <div class="card">
            <h3><i class="fas fa-upload"></i> Data Upload</h3>
            <div class="upload-area" id="uploadArea">
                <div class="upload-icon">
                    <i class="fas fa-cloud-upload-alt"></i>
                </div>
                <p>Drag and drop your CSV file here or click to browse</p>
                <input type="file" id="fileInput" accept=".csv" style="display: none;">
            </div>
            <button class="btn" onclick="document.getElementById('fileInput').click()">
                <i class="fas fa-file-csv"></i> Choose File
            </button>
            <button class="btn btn-secondary" onclick="loadSampleData()">
                <i class="fas fa-database"></i> Load Sample Data
            </button>
        </div>

        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>Processing data...</p>
        </div>

        <div id="dataAnalysis" class="hidden">
            <div class="dashboard">
                <div class="card">
                    <h3><i class="fas fa-calculator"></i> Statistical Summary</h3>
                    <div class="stats-grid" id="statsGrid">
                        <!-- Stats will be populated here -->
                    </div>
                </div>

                <div class="card">
                    <h3><i class="fas fa-chart-bar"></i> Data Distribution</h3>
                    <div class="chart-container">
                        <canvas id="distributionChart"></canvas>
                    </div>
                </div>

                <div class="card">
                    <h3><i class="fas fa-chart-line"></i> Trend Analysis</h3>
                    <div class="chart-container">
                        <canvas id="trendChart"></canvas>
                    </div>
                </div>

                <div class="card">
                    <h3><i class="fas fa-brain"></i> ML Prediction</h3>
                    <div class="input-group">
                        <label for="featureSelect">Select Feature:</label>
                        <select id="featureSelect">
                            <option value="">Choose a feature</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label for="predictionInput">Value:</label>
                        <input type="number" id="predictionInput" placeholder="Enter value">
                    </div>
                    <button class="btn" onclick="makePrediction()">
                        <i class="fas fa-magic"></i> Predict
                    </button>
                    <div id="predictionResult" style="margin-top: 15px; padding: 15px; background: #f8f9fa; border-radius: 8px;">
                        <!-- Prediction result will appear here -->
                    </div>
                </div>
            </div>

            <div class="card">
                <h3><i class="fas fa-table"></i> Data Preview</h3>
                <div style="max-height: 400px; overflow-y: auto;">
                    <table class="data-table" id="dataTable">
                        <!-- Data table will be populated here -->
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        let csvData = [];
        let headers = [];
        let distributionChart, trendChart;

        // File upload handling
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');

        uploadArea.addEventListener('click', () => fileInput.click());
        uploadArea.addEventListener('dragover', handleDragOver);
        uploadArea.addEventListener('dragleave', handleDragLeave);
        uploadArea.addEventListener('drop', handleDrop);
        fileInput.addEventListener('change', handleFileSelect);

        function handleDragOver(e) {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        }

        function handleDragLeave(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                processFile(files[0]);
            }
        }

        function handleFileSelect(e) {
            const file = e.target.files[0];
            if (file) {
                processFile(file);
            }
        }

        function processFile(file) {
            if (file.type !== 'text/csv') {
                showAlert('error', 'Please upload a CSV file.');
                return;
            }

            showLoading(true);
            Papa.parse(file, {
                header: true,
                complete: function(results) {
                    if (results.errors.length > 0) {
                        showAlert('error', 'Error parsing CSV file.');
                        showLoading(false);
                        return;
                    }
                    csvData = results.data.filter(row => Object.values(row).some(val => val.trim() !== ''));
                    headers = results.meta.fields;
                    analyzeData();
                },
                error: function(error) {
                    showAlert('error', 'Error reading file: ' + error.message);
                    showLoading(false);
                }
            });
        }

        function loadSampleData() {
            showLoading(true);
            
            // Generate sample data
            const sampleData = [];
            for (let i = 1; i <= 100; i++) {
                sampleData.push({
                    'ID': i,
                    'Age': Math.floor(Math.random() * 50) + 20,
                    'Income': Math.floor(Math.random() * 100000) + 30000,
                    'Spending': Math.floor(Math.random() * 50000) + 5000,
                    'Satisfaction': (Math.random() * 5).toFixed(1),
                    'Date': new Date(2024, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1).toISOString().split('T')[0]
                });
            }
            
            csvData = sampleData;
            headers = ['ID', 'Age', 'Income', 'Spending', 'Satisfaction', 'Date'];
            
            setTimeout(() => {
                analyzeData();
                showLoading(false);
            }, 1000);
        }

        function analyzeData() {
            if (csvData.length === 0) return;

            showLoading(false);
            document.getElementById('dataAnalysis').classList.remove('hidden');
            
            calculateStatistics();
            createDistributionChart();
            createTrendChart();
            populateDataTable();
            populateFeatureSelect();
            
            showAlert('success', 'Data analysis completed successfully!');
        }

        function calculateStatistics() {
            const statsGrid = document.getElementById('statsGrid');
            statsGrid.innerHTML = '';

            const numericColumns = headers.filter(header => {
                return csvData.some(row => !isNaN(parseFloat(row[header])));
            });

            const stats = {
                'Total Records': csvData.length,
                'Columns Count': headers.length,
                'Numeric Columns': numericColumns.length
            };

            // Add basic statistics for numeric columns
            if (numericColumns.length > 0) {
                const firstNumericColumn = numericColumns[0];
                const values = csvData.map(row => parseFloat(row[firstNumericColumn])).filter(v => !isNaN(v));
                
                if (values.length > 0) {
                    stats['Mean ' + firstNumericColumn] = (values.reduce((a, b) => a + b, 0) / values.length).toFixed(2);
                    stats['Max ' + firstNumericColumn] = Math.max(...values).toFixed(2);
                    stats['Min ' + firstNumericColumn] = Math.min(...values).toFixed(2);
                }
            }

            Object.entries(stats).forEach(([key, value]) => {
                const statCard = document.createElement('div');
                statCard.className = 'stat-card';
                statCard.innerHTML = `
                    <div class="stat-value">${value}</div>
                    <div class="stat-label">${key}</div>
                `;
                statsGrid.appendChild(statCard);
            });
        }

        function createDistributionChart() {
            const ctx = document.getElementById('distributionChart').getContext('2d');
            
            if (distributionChart) {
                distributionChart.destroy();
            }

            const numericColumns = headers.filter(header => {
                return csvData.some(row => !isNaN(parseFloat(row[header])));
            });

            if (numericColumns.length === 0) return;

            const firstNumericColumn = numericColumns[0];
            const values = csvData.map(row => parseFloat(row[firstNumericColumn])).filter(v => !isNaN(v));

            // Create histogram bins
            const min = Math.min(...values);
            const max = Math.max(...values);
            const binCount = 10;
            const binSize = (max - min) / binCount;
            const bins = [];

            for (let i = 0; i < binCount; i++) {
                const binStart = min + i * binSize;
                const binEnd = binStart + binSize;
                const count = values.filter(v => v >= binStart && v < binEnd).length;
                bins.push({
                    label: `${binStart.toFixed(0)}-${binEnd.toFixed(0)}`,
                    count: count
                });
            }

            distributionChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: bins.map(bin => bin.label),
                    datasets: [{
                        label: 'Frequency',
                        data: bins.map(bin => bin.count),
                        backgroundColor: 'rgba(102, 126, 234, 0.6)',
                        borderColor: 'rgba(102, 126, 234, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: firstNumericColumn + ' Distribution'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function createTrendChart() {
            const ctx = document.getElementById('trendChart').getContext('2d');
            
            if (trendChart) {
                trendChart.destroy();
            }

            const dateColumn = headers.find(header => 
                header.toLowerCase().includes('date') || 
                header.toLowerCase().includes('time')
            );

            if (!dateColumn) return;

            // Sort by date
            const sortedData = [...csvData].sort((a, b) => 
                new Date(a[dateColumn]) - new Date(b[dateColumn])
            );

            const numericColumns = headers.filter(header => {
                return csvData.some(row => !isNaN(parseFloat(row[header])));
            });

            if (numericColumns.length === 0) return;

            const firstNumericColumn = numericColumns[0];

            trendChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: sortedData.map(row => new Date(row[dateColumn]).toLocaleDateString()),
                    datasets: [{
                        label: firstNumericColumn,
                        data: sortedData.map(row => parseFloat(row[firstNumericColumn]) || 0),
                        borderColor: 'rgba(118, 75, 162, 1)',
                        backgroundColor: 'rgba(118, 75, 162, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: firstNumericColumn + ' Over Time'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        function populateDataTable() {
            const table = document.getElementById('dataTable');
            table.innerHTML = '';

            // Create header row
            const headerRow = document.createElement('tr');
            headers.forEach(header => {
                const th = document.createElement('th');
                th.textContent = header;
                headerRow.appendChild(th);
            });
            table.appendChild(headerRow);

            // Create data rows (show first 10 rows)
            const dataToShow = csvData.slice(0, 10);
            dataToShow.forEach(row => {
                const tr = document.createElement('tr');
                headers.forEach(header => {
                    const td = document.createElement('td');
                    td.textContent = row[header] || '';
                    tr.appendChild(td);
                });
                table.appendChild(tr);
            });
        }

        function populateFeatureSelect() {
            const select = document.getElementById('featureSelect');
            select.innerHTML = '<option value="">Choose a feature</option>';

            const numericColumns = headers.filter(header => {
                return csvData.some(row => !isNaN(parseFloat(row[header])));
            });

            numericColumns.forEach(column => {
                const option = document.createElement('option');
                option.value = column;
                option.textContent = column;
                select.appendChild(option);
            });
        }

        function makePrediction() {
            const featureSelect = document.getElementById('featureSelect');
            const predictionInput = document.getElementById('predictionInput');
            const resultDiv = document.getElementById('predictionResult');

            if (!featureSelect.value || !predictionInput.value) {
                showAlert('error', 'Please select a feature and enter a value.');
                return;
            }

            const feature = featureSelect.value;
            const inputValue = parseFloat(predictionInput.value);

            // Simple linear regression prediction
            const values = csvData.map(row => parseFloat(row[feature])).filter(v => !isNaN(v));
            const mean = values.reduce((a, b) => a + b, 0) / values.length;
            const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;
            const stdDev = Math.sqrt(variance);

            // Simple prediction based on z-score
            const zScore = (inputValue - mean) / stdDev;
            const prediction = mean + (zScore * stdDev * 0.1); // Simple adjustment

            resultDiv.innerHTML = `
                <h4>Prediction Result:</h4>
                <p><strong>Input:</strong> ${inputValue}</p>
                <p><strong>Feature:</strong> ${feature}</p>
                <p><strong>Predicted Value:</strong> ${prediction.toFixed(2)}</p>
                <p><strong>Data Mean:</strong> ${mean.toFixed(2)}</p>
                <p><strong>Standard Deviation:</strong> ${stdDev.toFixed(2)}</p>
            `;
        }

        function showAlert(type, message) {
            const alert = document.getElementById(type + 'Alert');
            const messageSpan = document.getElementById(type + 'Message');
            
            messageSpan.textContent = message;
            alert.style.display = 'block';
            
            setTimeout(() => {
                alert.style.display = 'none';
            }, 5000);
        }

        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'block' : 'none';
        }
    </script>
</body>
</html>

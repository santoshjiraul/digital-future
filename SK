<!DOCTYPE html>
<html lang="hi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WhatsApp Web Clone</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            height: 100vh;
            display: flex;
            background-color: #f0f2f5;
        }
        
        .app-container {
            display: flex;
            width: 100%;
            max-width: 1200px;
            height: 90vh;
            margin: 20px auto;
            background-color: #fff;
            border-radius: 10px;
            box-shadow: 0 1px 3px rgba(60, 64, 67, 0.3), 0 4px 8px rgba(60, 64, 67, 0.15);
            overflow: hidden;
        }
        
        /* Sidebar Styles */
        .sidebar {
            width: 300px;
            background-color: #f0f2f5;
            border-right: 1px solid #e0e0e0;
            display: flex;
            flex-direction: column;
        }
        
        .sidebar-header {
            display: flex;
            align-items: center;
            padding: 15px;
            background-color: #007bff;
            color: white;
        }
        
        .sidebar-header h2 {
            font-size: 18px;
            margin-left: 10px;
        }
        
        .search-bar {
            padding: 10px 15px;
            border-bottom: 1px solid #ddd;
        }
        
        .search-bar input {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 20px;
            background-color: #f0f2f5;
            outline: none;
        }
        
        .chat-list {
            flex: 1;
            overflow-y: auto;
        }
        
        .chat-item {
            display: flex;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #e0e0e0;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .chat-item:hover {
            background-color: #f0f2f5;
        }
        
        .chat-item.active {
            background-color: #e8f0fe;
        }
        
        .chat-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: #007bff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 15px;
        }
        
        .chat-info {
            flex: 1;
        }
        
        .chat-name {
            font-weight: 600;
            margin-bottom: 5px;
        }
        
        .chat-message {
            font-size: 14px;
            color: #5f6368;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .chat-time {
            font-size: 12px;
            color: #5f6368;
            margin-left: 10px;
        }
        
        /* Chat Area Styles */
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .chat-header {
            display: flex;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid #e0e0e0;
            background-color: #f0f2f5;
        }
        
        .chat-header-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #007bff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 15px;
        }
        
        .chat-header-info h3 {
            font-size: 16px;
        }
        
        .chat-header-status {
            font-size: 12px;
            color: #5f6368;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background-color: #f0f2f5;
        }
        
        .message {
            display: flex;
            margin-bottom: 20px;
        }
        
        .message.sent {
            justify-content: flex-end;
        }
        
        .message-bubble {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 18px;
            position: relative;
        }
        
        .message.received .message-bubble {
            background-color: white;
            border-bottom-left-radius: 4px;
        }
        
        .message.sent .message-bubble {
            background-color: #dcf8c6;
            border-bottom-right-radius: 4px;
        }
        
        .message-time {
            font-size: 12px;
            color: #5f6368;
            margin-top: 5px;
            text-align: right;
        }
        
        .message-input {
            display: flex;
            align-items: center;
            padding: 15px;
            border-top: 1px solid #e0e0e0;
            background-color: #f0f2f5;
        }
        
        .message-input input {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 20px;
            background-color: white;
            outline: none;
            margin-right: 10px;
        }
        
        .message-input button {
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .message-input button:hover {
            background-color: #0056b3;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .app-container {
                flex-direction: column;
                height: 100vh;
                margin: 0;
                border-radius: 0;
            }
            
            .sidebar {
                width: 100%;
                height: 40%;
            }
            
            .chat-area {
                height: 60%;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <i class="fas fa-whatsapp" style="font-size: 24px;"></i>
                <h2>WhatsApp</h2>
            </div>
            <div class="search-bar">
                <input type="text" placeholder="Search or start new chat" id="searchInput">
            </div>
            <div class="chat-list" id="chatList">
                <!-- Chats will be dynamically added here -->
            </div>
        </div>
        
        <!-- Chat Area -->
        <div class="chat-area">
            <div class="chat-header">
                <div class="chat-header-avatar" id="chatHeaderAvatar">A</div>
                <div class="chat-header-info">
                    <h3 id="chatHeaderName">Select a chat</h3>
                    <div class="chat-header-status" id="chatHeaderStatus">Online</div>
                </div>
            </div>
            <div class="chat-messages" id="chatMessages">
                <!-- Messages will be dynamically added here -->
            </div>
            <div class="message-input">
                <input type="text" placeholder="Type a message" id="messageInput">
                <button id="sendButton">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>

    <script>
        // Sample data for chats and messages
        const chatsData = [
            {
                id: 1,
                name: "Amit",
                avatar: "A",
                lastMessage: "Hello! How are you?",
                time: "10:30 AM",
                messages: [
                    { id: 1, text: "Hi there!", sent: false, time: "10:25 AM" },
                    { id: 2, text: "Hello! How are you?", sent: false, time: "10:30 AM" }
                ]
            },
            {
                id: 2,
                name: "Priya",
                avatar: "P",
                lastMessage: "See you tomorrow!",
                time: "Yesterday",
                messages: [
                    { id: 1, text: "Are we still meeting tomorrow?", sent: true, time: "Yesterday" },
                    { id: 2, text: "Yes, definitely at 3 PM", sent: false, time: "Yesterday" },
                    { id: 3, text: "Great! See you tomorrow!", sent: true, time: "Yesterday" },
                    { id: 4, text: "See you tomorrow!", sent: false, time: "Yesterday" }
                ]
            },
            {
                id: 3,
                name: "Rahul",
                avatar: "R",
                lastMessage: "Thanks for your help!",
                time: "2 days ago",
                messages: [
                    { id: 1, text: "Can you help me with this project?", sent: false, time: "2 days ago" },
                    { id: 2, text: "Sure, what do you need help with?", sent: true, time: "2 days ago" },
                    { id: 3, text: "Thanks for your help!", sent: false, time: "2 days ago" }
                ]
            }
        ];
        
        let currentChatId = null;
        
        // Function to render chat list
        function renderChatList() {
            const chatList = document.getElementById('chatList');
            chatList.innerHTML = '';
            
            chatsData.forEach(chat => {
                const chatItem = document.createElement('div');
                chatItem.className = 'chat-item';
                if (chat.id === currentChatId) {
                    chatItem.classList.add('active');
                }
                
                chatItem.innerHTML = `
                    <div class="chat-avatar">${chat.avatar}</div>
                    <div class="chat-info">
                        <div class="chat-name">${chat.name}</div>
                        <div class="chat-message">${chat.lastMessage}</div>
                    </div>
                    <div class="chat-time">${chat.time}</div>
                `;
                
                chatItem.addEventListener('click', () => selectChat(chat.id));
                chatList.appendChild(chatItem);
            });
        }
        
        // Function to select a chat
        function selectChat(chatId) {
            currentChatId = chatId;
            const chat = chatsData.find(c => c.id === chatId);
            
            if (chat) {
                // Update chat header
                document.getElementById('chatHeaderAvatar').textContent = chat.avatar;
                document.getElementById('chatHeaderName').textContent = chat.name;
                
                // Render messages
                renderMessages(chat.messages);
                
                // Update chat list active state
                renderChatList();
            }
        }
        
        // Function to render messages
        function renderMessages(messages) {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML = '';
            
            messages.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${message.sent ? 'sent' : 'received'}`;
                
                messageDiv.innerHTML = `
                    <div class="message-bubble">${message.text}</div>
                    <div class="message-time">${message.time}</div>
                `;
                
                chatMessages.appendChild(messageDiv);
            });
            
            // Scroll to bottom
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Function to send a message
        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const messageText = messageInput.value.trim();
            
            if (messageText && currentChatId) {
                const chat = chatsData.find(c => c.id === currentChatId);
                
                if (chat) {
                    // Create new message
                    const newMessage = {
                        id: chat.messages.length + 1,
                        text: messageText,
                        sent: true,
                        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
                    };
                    
                    // Add message to chat
                    chat.messages.push(newMessage);
                    chat.lastMessage = messageText;
                    chat.time = "Just now";
                    
                    // Update UI
                    renderMessages(chat.messages);
                    renderChatList();
                    
                    // Clear input
                    messageInput.value = '';
                    
                    // Simulate reply after 1 second
                    setTimeout(() => {
                        simulateReply(chat);
                    }, 1000);
                }
            }
        }
        
        // Function to simulate a reply
        function simulateReply(chat) {
            const replies = [
                "That's great!",
                "I understand.",
                "Thanks for letting me know.",
                "Can you tell me more?",
                "Interesting, tell me more.",
                "I'll get back to you on that.",
                "Sounds good to me!",
                "Let me think about it."
            ];
            
            const randomReply = replies[Math.floor(Math.random() * replies.length)];
            
            // Create new message
            const newMessage = {
                id: chat.messages.length + 1,
                text: randomReply,
                sent: false,
                time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
            };
            
            // Add message to chat
            chat.messages.push(newMessage);
            chat.lastMessage = randomReply;
            chat.time = "Just now";
            
            // Update UI
            renderMessages(chat.messages);
            renderChatList();
        }
        
        // Function to search chats
        function searchChats() {
            const searchInput = document.getElementById('searchInput');
            const searchTerm = searchInput.value.toLowerCase();
            
            const chatList = document.getElementById('chatList');
            chatList.innerHTML = '';
            
            const filteredChats = chatsData.filter(chat => 
                chat.name.toLowerCase().includes(searchTerm) || 
                chat.lastMessage.toLowerCase().includes(searchTerm)
            );
            
            filteredChats.forEach(chat => {
                const chatItem = document.createElement('div');
                chatItem.className = 'chat-item';
                if (chat.id === currentChatId) {
                    chatItem.classList.add('active');
                }
                
                chatItem.innerHTML = `
                    <div class="chat-avatar">${chat.avatar}</div>
                    <div class="chat-info">
                        <div class="chat-name">${chat.name}</div>
                        <div class="chat-message">${chat.lastMessage}</div>
                    </div>
                    <div class="chat-time">${chat.time}</div>
                `;
                
                chatItem.addEventListener('click', () => selectChat(chat.id));
                chatList.appendChild(chatItem);
            });
        }
        
        // Event listeners
        document.getElementById('sendButton').addEventListener('click', sendMessage);
        document.getElementById('messageInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        document.getElementById('searchInput').addEventListener('input', searchChats);
        
        // Initialize app
        renderChatList();
    </script>
</body>
</html>
